package com.security.library.jwt;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.security.library.entities.Employee;
import com.security.library.repository.EmployeeAuthRepository;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class JwtUserDetailsService implements UserDetailsService {

	@Autowired
	private EmployeeAuthRepository employeeAuthRepository;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		
//		System.out.println("------++--"+this.employeeAuthRepository.findByEmailId(username));
//		System.out.println("--------"+this.employeeAuthRepository.findByEmail(username).getRole());
		
		Optional<Employee> employee = this.employeeAuthRepository.findByEmail(username);
		
//		log.warn("USERNAME:{}"+username);
//		log.warn("USER-D:"+employee);
		
		
//		Set<SimpleGrantedAuthority> authority= new HashSet<>();
//		authority.add(new SimpleGrantedAuthority("Read"));
//		authority.add(new SimpleGrantedAuthority("Create"));
//		authority.add(new SimpleGrantedAuthority("Delete"));
//		authority.add(new SimpleGrantedAuthority("ROLE_EMPLOYEE"));
		
		if(employee.isPresent()) {
			Set<SimpleGrantedAuthority> authority= new HashSet<>();
			Set<SimpleGrantedAuthority> authorities = employee.getRole().getAuthorities().stream().map(auth -> new SimpleGrantedAuthority(auth)).collect(Collectors.toSet());	
			return new User(username, employee.getPassword(), true, true, true, true, authorities);
		}
		else {
			return null;
		}
		
	}

}
