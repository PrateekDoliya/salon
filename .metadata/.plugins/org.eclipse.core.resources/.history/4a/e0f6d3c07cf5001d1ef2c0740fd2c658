
package com.sloon.employee.models;

import java.time.LocalDate;
import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor

@NoArgsConstructor

@Data

@Entity
public class Employee implements UserDetails {

	@Id

	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	private Integer empId;

	@JsonProperty(namespace = "first_name")
	private String fname;

	@JsonProperty(namespace = "last_name")
	private String lname;

	private String email;

	private String password;

	@JsonProperty(namespace = "mobile_number")
	private String mobileNo;

	@JsonProperty(namespace = "date_of_birth")
	private LocalDate dob;

	private String gender;

	@JsonProperty(namespace = "date_of_joining")
	private LocalDate dateOfJoining;

	@JsonProperty(namespace = "last_working_day")
	private LocalDate lastWorkingdate;

	private String pancard;

	private String aadharcard;

	@OneToOne(cascade = { CascadeType.ALL, CascadeType.ALL }, fetch = FetchType.EAGER)
	private Role role;

	@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private Address address;

	// private String familyDetails; // private String attendance;

	private String photo;

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {

		SimpleGrantedAuthority roleAuthority = new SimpleGrantedAuthority(role.getName());
		Set<SimpleGrantedAuthority> authorities = role.getAuthorities().stream().map(SimpleGrantedAuthority::new)
				.collect(Collectors.toSet());
		authorities.add(roleAuthority);
		return authorities;
	}

	@Override
	public String getPassword() {
		return password;
	}

	@Override
	public String getUsername() {
		return email;
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}
}
