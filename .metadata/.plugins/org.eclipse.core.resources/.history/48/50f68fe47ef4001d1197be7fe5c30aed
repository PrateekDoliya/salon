package com.customer.service.services.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.customer.service.entities.Customer;
import com.customer.service.exception.ResourceNotFoundException;
import com.customer.service.repository.CustomerRepository;
import com.customer.service.requestDto.CustomerRequestDto;
import com.customer.service.responseDto.CustomerResponseDto;
import com.customer.service.services.CustomerService;

@Service
public class CustomerServiceImpl implements CustomerService {

	@Autowired
	private CustomerRepository customerRepository;
	
	@Autowired
	private ModelMapper mapper;
	
	@Override
	public CustomerResponseDto createCustomer(CustomerRequestDto customerRequestDto) {
		Customer customer = this.mapper.map(customerRequestDto, Customer.class);
		Customer savedCustomer = this.customerRepository.save(customer);
		return this.mapper.map(savedCustomer, CustomerResponseDto.class);
	}

	@Override
	public CustomerResponseDto updateCustomer(Integer customerId, CustomerRequestDto customerRequestDto) {
		Customer customer = this.customerRepository.findById(customerId).orElseThrow(() -> new ResourceNotFoundException("Customer", "customer_id", customerId));
		customer.setCustomerName(customerRequestDto.getCustomerName());
		customer.setCustomerEmail(customerRequestDto.getCustomerEmail());
		customer.setMobileNumber(customerRequestDto.getMobileNumber());
		customer.setEmployee(customerRequestDto.getEmployee());
		Customer updatedCustomer = this.customerRepository.save(customer);
		return this.mapper.map(updatedCustomer, CustomerResponseDto.class);
	}

	@Override
	public CustomerResponseDto deleteCustomer(Integer customerId) {
		Customer customer = this.customerRepository.findById(customerId).orElseThrow(() -> new ResourceNotFoundException("Customer", "customer_id", customerId));
		this.customerRepository.delete(customer);
		return this.mapper.map(customer, CustomerResponseDto.class);
	}

	@Override
	public List<CustomerResponseDto> getAllCustomers() {
		List<Customer> allCustomers = this.customerRepository.findAll();
		List<CustomerResponseDto> allCustomerResponseDtos = allCustomers.stream().map(customer -> this.mapper.map(customer, CustomerResponseDto.class)).collect(Collectors.toList());
		return allCustomerResponseDtos;
	}

	@Override
	public CustomerResponseDto getCustomerById(Integer customerId) {
		Customer customer = this.customerRepository.findById(customerId).orElseThrow(() -> new ResourceNotFoundException("Customer", "customer_id", customerId));
		return this.mapper.map(customer, CustomerResponseDto.class);
	}

	@Override
	public List<CustomerResponseDto> getCustomerByEmployeeId(Integer employeeId) {
		
		return null;
	}

	
	
}
