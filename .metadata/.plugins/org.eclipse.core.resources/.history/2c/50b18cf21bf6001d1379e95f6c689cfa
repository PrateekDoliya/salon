
package com.sloon.employee.models;

import java.time.LocalDate;

import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@NoArgsConstructor
@Data
@Entity
@Table(name = "employee")
public class EmployeeData {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer empId;
	private String fname;
	private String lname;
	private String email;
	private String password;
	private String mobileNo;
	private LocalDate dob;
	private String gender;
	private LocalDate dateOfJoining;
	private LocalDate lastWorkingdate;
	private String pancard;
	private String aadharcard;
	@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private RoleData roleData;
	@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private AddressData addressData;
	private String photo;
	// private String familyDetails; 
	// private String attendance;
	

//	@Override
//	public Collection<? extends GrantedAuthority> getAuthorities() {
//
//		SimpleGrantedAuthority roleAuthority = new SimpleGrantedAuthority(role.getName());
//		Set<SimpleGrantedAuthority> authorities = role.getAuthorities().stream().map(SimpleGrantedAuthority::new)
//				.collect(Collectors.toSet());
//		authorities.add(roleAuthority);
//		return authorities;
//	}
//
//	@Override
//	public String getPassword() {
//		return password;
//	}
//
//	@Override
//	public String getUsername() {
//		return email;
//	}
//
//	@Override
//	public boolean isAccountNonExpired() {
//		return true;
//	}
//
//	@Override
//	public boolean isAccountNonLocked() {
//		return true;
//	}
//
//	@Override
//	public boolean isCredentialsNonExpired() {
//		return true;
//	}
//
//	@Override
//	public boolean isEnabled() {
//		return true;
//	}
}
